#!/usr/bin/env python
import os
import sys
import subprocess
import threading
import signal
import time

def run_consumer():
    """Executa o consumer em uma thread separada"""
    print("üê∞ [CONSUMER] Iniciando consumer RabbitMQ...")
    try:
        # Aguardar RabbitMQ estar dispon√≠vel - aumentado para 15 segundos
        print("‚è≥ [CONSUMER] Aguardando RabbitMQ estar dispon√≠vel...")
        time.sleep(15)
        os.system("python manage.py consume_orders")
    except Exception as e:
        print(f"‚ùå [CONSUMER] Erro ao iniciar consumer: {e}")

def run_django():
    """Executa o servidor Django"""
    print("üåê [DJANGO] Iniciando servidor Django...")
    try:
        os.system("python manage.py runserver 0.0.0.0:8081")
    except Exception as e:
        print(f"‚ùå [DJANGO] Erro ao iniciar Django: {e}")

def signal_handler(sig, frame):
    """Handler para parar os processos graciosamente"""
    print("‚ö†Ô∏è Parando servi√ßos...")
    sys.exit(0)

if __name__ == "__main__":
    print("üöÄ [STARTUP] Iniciando order_service...")
    
    # Aguardar banco de dados estar dispon√≠vel
    print("‚è≥ [DATABASE] Aguardando conex√£o com banco de dados...")
    time.sleep(10)
    
    # Aplicar migra√ß√µes
    print("üì¶ [MIGRATIONS] Aplicando migra√ß√µes...")
    migration_result = os.system("python manage.py migrate")
    if migration_result != 0:
        print("‚ùå [MIGRATIONS] Erro ao aplicar migra√ß√µes, tentando novamente...")
        time.sleep(5)
        os.system("python manage.py migrate --run-syncdb")
    else:
        print("‚úÖ [MIGRATIONS] Migra√ß√µes aplicadas com sucesso!")
    
    # Configurar handler para sinais
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # PRIMEIRA PRIORIDADE: Iniciar consumer em thread separada
    print("‚ö° [PRIORITY] Iniciando consumer RabbitMQ como prioridade...")
    consumer_thread = threading.Thread(target=run_consumer)
    consumer_thread.daemon = True
    consumer_thread.start()
    
    # Aguardar consumer inicializar completamente
    print("‚è≥ [WAIT] Aguardando consumer RabbitMQ inicializar...")
    time.sleep(10)
    
    # SEGUNDA PRIORIDADE: Executar Django (processo principal)
    print("‚ñ∂Ô∏è [START] Agora iniciando API Django...")
    run_django()